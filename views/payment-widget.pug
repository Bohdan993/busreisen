script.
  async function postTicketData(data, signature){
    const url = bookingHelpersInstance.getBaseApiUrl() + "/tickets";
    try {
      const result = await bookingHelpersInstance.makeRequest(url, null, {
          method: "POST",
          credentials: "include",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({data, signature})
      });
      return result;
    } catch(err) {
      console.error("[API Error]", err?.status);
      if(Swal.isVisible()) {
        Swal.close();
      }
      Swal.fire({
        icon: "error",
        title: "#{translations.oopsText}",
        text: "#{translations.errorText1}",
        showCloseButton: true,
        showConfirmButton: false,
        customClass: {
          confirmButton: 'base-button base-button--primary',
        }
      });
      throw err;
      return;
    }
  };
  async function generateTicket(data, signature){
    const url = bookingHelpersInstance.getBaseApiUrl() + "/tickets/generate";
    try {
      const result = await bookingHelpersInstance.makeRequest(url, null, {
          method: "POST",
          credentials: "include",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({data, signature})
      });
      return result;
    } catch(err) {
      console.error("[API Error]", err?.status);
      if(Swal.isVisible()) {
        Swal.close();
      }
      Swal.fire({
        icon: "error",
        title: "#{translations.oopsText}",
        text: "#{translations.errorText1}",
        showCloseButton: true,
        showConfirmButton: false,
        customClass: {
          confirmButton: 'base-button base-button--primary',
        }
      });
      throw err;
      return;
    }
  };
  function downdloadTicket(result){
    const a = document.createElement("a");
    const link = window.URL.createObjectURL(result);
    a.href = link;
    a.download = "Benz_Express_Ticket.pdf";
    document.body.append(a);
    a.click();
    a.remove();
    window.URL.revokeObjectURL(link);
  }
  async function generateTicketPDF(data, signature){
    bookingHelpersInstance.showLoadSpinner('#generate-ticket-pdf');
    const url = bookingHelpersInstance.getBaseApiUrl() + "/tickets/generate-pdf";
    try {
      const result = await bookingHelpersInstance.makeRequest(url, null, {
          method: "POST",
          credentials: "include",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({data, signature})
      });
      const blob = await result.blob();
      downdloadTicket(blob);
      bookingHelpersInstance.hideLoadSpinner('#generate-ticket-pdf');
      return result;
    } catch (err) {
      console.error("[API Error]", `Error: ${err?.message}`);
      if(Swal.isVisible()) {
        Swal.close();
      }
      Swal.fire({
        icon: "error",
        title: "#{translations.oopsText}",
        text: "#{translations.errorText1}",
        showCloseButton: true,
        showConfirmButton: false,
        customClass: {
          confirmButton: 'base-button base-button--primary',
        }
      });
      throw err;
      return;
    }
  }
  async function sendTicketMail(data, signature){
    const url = bookingHelpersInstance.getBaseApiUrl() + "/tickets/send";
    try {
      const result = await bookingHelpersInstance.makeRequest(url, null, {
          method: "POST",
          credentials: "include",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({data, signature})
      });
      return result;
    } catch (err) {
      console.error("[API Error]", err?.status);
      if(Swal.isVisible()) {
        Swal.close();
      }
      Swal.fire({
        icon: "error",
        title: "#{translations.oopsText}",
        text: "#{translations.errorText1}",
        showCloseButton: true,
        showConfirmButton: false,
        customClass: {
          confirmButton: 'base-button base-button--primary',
        }
      });
      throw err;
      return;
    }
  }
  async function sendPaymentFailData(data, signature) {
    const url = bookingHelpersInstance.getBaseApiUrl() + "/tickets/payment-fail";
    try {
      const result = await bookingHelpersInstance.makeRequest(url, null, {
          method: "POST",
          credentials: "include",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({data, signature})
      });
      return result;
    } catch(err) {
      console.error("[API Error]", err?.status);
      throw err;
      return;
    }
  }
script.
  window.LiqPayCheckoutCallback = function() {
  LiqPayCheckout.init({
  data: "#{data}",
  signature: "#{signature}",
  embedTo: "#payment-container",
  language: "#{language}",
  mode: "embed" // embed || popup
  }).on("liqpay.callback", async function(data){
  $("#booking2 .booking-content .loading-area").show(0); 
  const btn = "<a href=\"#{linkToMain}\" class=\"base-button base-button--primary\" style=\" max-width:180px;margin:0 auto; margin-top: 35px;\"type=\"button\">#{translations.buttonText}</a>"
  $('#payment-container').append(btn);
  if(data.result === "ok") {
    try {
      $('#search-change-button').attr("disabled", true);
      await postTicketData(data?.data, data?.signature);
      await sendTicketMail(data, data?.signature);
      const ticket = await generateTicket(data?.data, data?.signature);
      Swal.fire({
        title: "!{translations.thanksText}",
        customClass: {
          container: "booking-payment-popup",
          confirmButton: 'base-button base-button--primary',
        },
        icon: "success",
        html: ticket, 
        text: "#{translations.successText}", 
        showCloseButton: true,
        showConfirmButton: false
      });
      $(document).on("click", "#generate-ticket-pdf", generateTicketPDF.bind(null, data?.data, data?.signature));
      $("#booking2 .booking-content .loading-area").fadeOut(100);
      return;
    } catch(err) {
        const errObj = JSON.parse(err.message);
        console.error("[API Error]", `Error: ${errObj?.status}`);
        if(Swal.isVisible()) {
          Swal.close();
        }
        Swal.fire({
          icon: "error",
          title: "#{translations.oopsText}",
          text: "#{translations.errorText1}",
          showCloseButton: true,
          showConfirmButton: false,
          customClass: {
              confirmButton: 'base-button base-button--primary',
          }
        });
        return;
    }
    return;
  } 
  await sendPaymentFailData(data?.data, data?.signature);
  Swal.fire({
    icon: "error",
    title: "#{translations.oopsText}",
    text: "#{translations.errorText2}",
    showCloseButton: true,
    showConfirmButton: false,
    customClass: {
        confirmButton: 'base-button base-button--primary',
    }
  });
  return;
  
  }).on("liqpay.ready", function(data){
      $("#booking2 .booking-content .loading-area").fadeOut(100); 
  }).on("liqpay.close", function(data){
  });
  };
script(src="/templates/transcomp/js/plugins/liqpay.checkout.js" async="")